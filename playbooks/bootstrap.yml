---
##
# Want to do just a new host and not all the hosts? Use the -l (--limit=)
# option.
#
#   ansible-playbook -i hosts.ini playbooks/bootstrap.yml -l new-host
#
# Add -k if the root account is password-protected.
#
# Depending on your SSH client configuration, you may need to start this
# playbook without and then resume with ansible_user as described below. This
# is especially likely to happen after the root password is locked.
#
# Otherwise, if it's not working, maybe the server was already bootstrapped?
# If you're just trying to create new users and/or update public keys, you can
# override the remote user on the command-line:
#
#   ansible-playbook -i hosts.ini playbooks/bootstrap.yml -e ansible_user=$USER
#
- hosts: all
  gather_facts: no
  vars:
    ansible_user: root
  tasks:
    - name: Install Python 2.x and APT module
      local_action: >
        command ssh {{ ansible_user }}@{{ hostvars[inventory_hostname].ansible_host }}
        {{ 'sudo' if ansible_user != 'root' else '' }}
        apt -yq --no-install-recommends install python python-apt
      register: apt
      changed_when: "'stdout' in apt and 'packages will be installed' in apt.stdout"

- hosts: all
  vars:
    ansible_user: root
  become: "{{ 'no' if ansible_user == 'root' else 'yes' }}"
  handlers:
    - name: restart sshd
      service:
        name: ssh
        state: restarted
  tasks:
    - name: import users lookup
      include_vars: file={{ lookup('env', 'PWD') }}/users.yml

    - name: ensure passwordless sudo for members of the sudo group
      lineinfile:
        dest: /etc/sudoers
        regexp: '^(%sudo\s+ALL=\(ALL:ALL\)\s+)(ALL)$'
        line: '\1NOPASSWD:\2'
        backrefs: yes
        validate: 'visudo -cf %s'

    - name: create or update users
      user:
        name: "{{ user.name }}"
        comment: "{{ user.fullname }}"
        uid: "{{ user.uid }}"
        shell: /bin/bash
        group: users
        groups: "{{ user.groups|join(',') if 'groups' in user else '' }}"
        append: yes
      loop: "{{ users }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"

    - name: create or update users' authorized_keys from GitHub
      authorized_key:
        user: "{{ user.name }}"
        key: https://github.com/{{ user.github.username }}.keys
        exclusive: yes
      loop: "{{ users }}"
      loop_control:
        loop_var: user
        label: "{{ user.name }}"
      when: "'github' in user"

    - name: lock root password
      user:
        name: root
        password_lock: yes

    - name: disable SSH as root and/or with password authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "^#?{{ item }}\\s+"
        line: "{{ item }} no"
        validate: 'sshd -f %s -t'
      loop:
        - ChallengeResponseAuthentication
        - PasswordAuthentication
        - PermitRootLogin
      notify: restart sshd

    - name: whitelist SSH users
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^AllowUsers\s+'
        line: "AllowUsers {{ users|selectattr('github', 'defined')|join(' ', attribute='name') }}"
        insertafter: '^PermitRootLogin\s+'
        validate: 'sshd -f %s -t'
      notify: restart sshd

    - name: allow rate-limited OpenSSH traffic
      ufw:
        rule: limit
        name: OpenSSH

    - name: enable UFW (ip/nftables front-end) (w/o logging)
      ufw:
        state: enabled
        logging: off
